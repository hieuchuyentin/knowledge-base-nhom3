/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package BTL;
import java.io.*;
import java.util.*;
import javax.swing.*;
import static javax.swing.JOptionPane.*;

/**
 *
 * @author Le Trung Hieu
 */
public class MainGUI extends javax.swing.JFrame {

    /**
     * Creates new form MainGUI
     */
    ArrayList<Event> listEvent = new ArrayList<Event>();
    ArrayList<SingleRule> listSingleRule = new ArrayList<SingleRule>();
    ArrayList<AndRule> listAndRule = new ArrayList<AndRule>();
    ArrayList<OrRule> listOrRule = new ArrayList<OrRule>();
    
    AddRule formAddRule = new AddRule(this);
    
    public MainGUI() {
        initComponents();
        formAddRule.setVisible(false);
        if (!LoadFileEvent())
            System.exit(0);
        if (!LoadFileSingleRule())
            System.exit(0);
        if (!LoadFileAndRule())
            System.exit(0);
        if (!LoadFileOrRule())
            System.exit(0);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public boolean LoadFileEvent()
    {
        FileReader fileReader;
        String stream;
        BufferedReader bufferReader;
        StringTokenizer tokenString;
        Event s;
        
        listEvent.clear();
        
        try
        {
            fileReader = new FileReader("src\\KB\\Event.txt");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Không tìm thấy tệp sự kiện", "Lỗi khởi tạo", ERROR_MESSAGE);
            return false;
        }
        bufferReader = new BufferedReader(fileReader);
        
        do
        {
            try
            {
                stream = bufferReader.readLine();        
                if (stream == null)
                    break;
                if (stream.equals(""))
                    continue;
                tokenString = new StringTokenizer(stream, "|");
                s = new Event(Integer.parseInt(tokenString.nextToken()), 0.0f, tokenString.nextToken());
                listEvent.add(s);
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, "Lỗi đọc tệp sự kiện", "Lỗi khởi tạo", ERROR_MESSAGE);
                try
                {
                    bufferReader.close();
                }
                catch (Exception e1)
                {            
                }
                return false;
            }
        }
        while (true);
        try
        {
            bufferReader.close();
        }
        catch (Exception e)
        {            
        }
        return true;
    }
    public boolean LoadFileSingleRule()
    {
        FileReader fileReader;
        String stream;
        BufferedReader bufferReader;
        StringTokenizer tokenString;
        SingleRule ruleSingle;
        
        listSingleRule.clear();
        
        try
        {
            fileReader = new FileReader("src\\KB\\SingleRule.txt");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Không tìm thấy tệp luật đơn", "Lỗi khởi tạo", ERROR_MESSAGE);
            return false;
        }
        bufferReader = new BufferedReader(fileReader);
        
        do
        {
            try
            {
                stream = bufferReader.readLine();        
                if (stream == null)
                    break;
                if (stream.equals(""))
                    continue;
                tokenString = new StringTokenizer(stream, "|");
                ruleSingle = new SingleRule(Integer.parseInt(tokenString.nextToken()), 
                        Integer.parseInt(tokenString.nextToken()), 
                        Float.parseFloat(tokenString.nextToken()));
                listSingleRule.add(ruleSingle);
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, "Lỗi đọc tệp luật đơn", "Lỗi khởi tạo", ERROR_MESSAGE);
                try
                {
                    bufferReader.close();
                }
                catch (Exception e1)
                {            
                }
                return false;
            }
        }
        while (true);
        try
        {
            bufferReader.close();
        }
        catch (Exception e)
        {            
        }
        return true;
    }
    public boolean LoadFileAndRule()
    {
        FileReader fileReader;
        String stream;
        BufferedReader bufferReader;
        StringTokenizer tokenString;
        AndRule ruleAnd;
        
        listAndRule.clear();
        
        try
        {
            fileReader = new FileReader("src\\KB\\AndRule.txt");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Không tìm thấy tệp luật And", "Lỗi khởi tạo", ERROR_MESSAGE);
            return false;
        }
        bufferReader = new BufferedReader(fileReader);
        
        do
        {
            try
            {
                stream = bufferReader.readLine();            
                if (stream == null)
                    break;
                if (stream.equals(""))
                    continue;
                tokenString = new StringTokenizer(stream, "|");
                ruleAnd = new AndRule(Integer.parseInt(tokenString.nextToken()), 
                        Integer.parseInt(tokenString.nextToken()),
                         Integer.parseInt(tokenString.nextToken()),
                        Float.parseFloat(tokenString.nextToken()));
                listAndRule.add(ruleAnd);
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, "Lỗi đọc tệp luật And", "Lỗi khởi tạo", ERROR_MESSAGE);
                try
                {
                    bufferReader.close();
                }
                catch (Exception e1)
                {            
                }
                return false;
            }
        }
        while (true);
        try
        {
            bufferReader.close();
        }
        catch (Exception e)
        {            
        }        
        return true;
    }
    public boolean LoadFileOrRule()
    {
        FileReader fileReader;
        String stream;
        BufferedReader bufferReader;
        StringTokenizer tokenString;
        OrRule ruleOr;
        
        listOrRule.clear();
        
        try
        {
            fileReader = new FileReader("src\\KB\\OrRule.txt");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Không tìm thấy tệp luật Or", "Lỗi khởi tạo", ERROR_MESSAGE);
            return false;
        }
        bufferReader = new BufferedReader(fileReader);
        
        do
        {
            try
            {
                stream = bufferReader.readLine();            
                if (stream == null)
                    break;
                if (stream.equals(""))
                    continue;
                tokenString = new StringTokenizer(stream, "|");
                ruleOr = new OrRule(Integer.parseInt(tokenString.nextToken()), 
                        Integer.parseInt(tokenString.nextToken()),
                         Integer.parseInt(tokenString.nextToken()),
                        Float.parseFloat(tokenString.nextToken()));
                listOrRule.add(ruleOr);
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, "Lỗi đọc tệp luật Or", "Lỗi khởi tạo", ERROR_MESSAGE);
                try
                {
                    bufferReader.close();
                }
                catch (Exception e1)
                {            
                }
                return false;
            }
        }
        while (true);
        try
        {
            bufferReader.close();
        }
        catch (Exception e)
        {            
        }       
        return true;
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSpinner3 = new javax.swing.JSpinner();
        jSpinner4 = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        btTest = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jCheckBox1.setText("Đau đầu");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setText("Sổ mũi");

        jCheckBox3.setText("Ho");

        jCheckBox4.setText("Khó thở");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(20, 0, 200, 1));

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(37, 35, 42, 1));
        jSpinner2.setAutoscrolls(true);

        jLabel1.setText("Tuổi");

        jLabel2.setText("độ C");

        jLabel3.setText("Thân nhiệt");

        jLabel4.setText("tuổi");

        jLabel5.setText("jLabel1");

        jLabel6.setText("Huyết áp");

        jSpinner3.setModel(new javax.swing.SpinnerNumberModel(80, 0, 200, 1));

        jSpinner4.setModel(new javax.swing.SpinnerNumberModel(120, 0, 200, 1));

        jLabel7.setText("Giới tính");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nam", "Nữ" }));

        btTest.setText("Suy diễn");
        btTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 263, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBox2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jCheckBox3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBox4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSpinner4)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(130, 130, 130))
            .addGroup(layout.createSequentialGroup()
                .addGap(323, 323, 323)
                .addComponent(btTest, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(50, 50, 50)
                    .addComponent(jLabel5)
                    .addContainerGap(670, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBox1)
                            .addComponent(jCheckBox3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBox4)
                            .addComponent(jCheckBox2))))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(btTest, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(203, 203, 203)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(259, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed
    private void Test()
    {
        Event s;
        SingleRule ruleSingle;
        OrRule ruleOr;
        AndRule ruleAnd;
        
        listEvent.clear();
        listSingleRule.clear();
        listAndRule.clear();
        listOrRule.clear();
        
        s = new Event(1, 0.9f);
        listEvent.add(s);
        s = new Event(2, 0.5f);
        listEvent.add(s);
        //s = new Event(3, 0.6f);
        //listEvent.add(s);
        
        ruleSingle = new SingleRule(1, 4, 0.8f);
        listSingleRule.add(ruleSingle);
        
        ruleSingle = new SingleRule(2, 3, 0.5f);
        listSingleRule.add(ruleSingle);
        
        ruleAnd = new AndRule(1, 3, 4, 0.9f);
        listAndRule.add(ruleAnd);
        
        ruleOr = new OrRule(2, 3, 4, 0.7f);
        listOrRule.add(ruleOr);
        
        Calculate cal = new Calculate(listEvent, listSingleRule, listAndRule, listOrRule);
        float dCF = cal.CalculateProbability(4);
        System.out.println(dCF);
    }
    private void btTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTestActionPerformed
        // TODO add your handling code here:
        Test();
        
    }//GEN-LAST:event_btTestActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btTest;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JSpinner jSpinner4;
    // End of variables declaration//GEN-END:variables
}
